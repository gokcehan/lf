.\" Code generated by gen/man.sh DO NOT EDIT.
.TH LF 1
.SH NAME
lf \- terminal file manager
.SH SYNOPSIS
.SY lf
.OP \-command command
.OP \-config path
.OP \-cpuprofile path
.OP \-doc
.OP \-last-dir-path path
.OP \-log path
.OP \-memprofile path
.OP \-remote command
.OP \-selection-path path
.OP \-server
.OP \-single
.OP \-version
.OP \-help
.RI [ cd-or-select-path ]
.YS
.SH DESCRIPTION
lf is a terminal file manager.
.PP
Source code can be found in the repository at https://github.com/gokcehan/lf
.PP
This documentation can either be read from terminal using 'lf -doc' or online at https://pkg.go.dev/github.com/gokcehan/lf You can also use 'doc' command (default '<f-1>') inside lf to view the documentation in a pager. A man page with the same content is also available in the repository at https://github.com/gokcehan/lf/blob/master/lf.1
.PP
You can run 'lf -help' to see descriptions of command line options.
.SH QUICK REFERENCE
The following commands are provided by lf:
.PP
.EX
    quit                     (default 'q')
    up                       (default 'k' and '<up>')
    half-up                  (default '<c-u>')
    page-up                  (default '<c-b>' and '<pgup>')
    scroll-up                (default '<c-y>')
    down                     (default 'j' and '<down>')
    half-down                (default '<c-d>')
    page-down                (default '<c-f>' and '<pgdn>')
    scroll-down              (default '<c-e>')
    updir                    (default 'h' and '<left>')
    open                     (default 'l' and '<right>')
    jump-next                (default ']')
    jump-prev                (default '[')
    top                      (default 'gg' and '<home>')
    bottom                   (default 'G' and '<end>')
    high                     (default 'H')
    middle                   (default 'M')
    low                      (default 'L')
    toggle
    invert                   (default 'v')
    invert-below
    unselect                 (default 'u')
    glob-select
    glob-unselect
    calcdirsize
    clearmaps
    copy                     (default 'y')
    cut                      (default 'd')
    paste                    (default 'p')
    clear                    (default 'c')
    sync
    draw
    redraw                   (default '<c-l>')
    load
    reload                   (default '<c-r>')
    echo
    echomsg
    echoerr
    cd
    select
    delete         (modal)
    rename         (modal)   (default 'r')
    source
    push
    read           (modal)   (default ':')
    shell          (modal)   (default '$')
    shell-pipe     (modal)   (default '%')
    shell-wait     (modal)   (default '!')
    shell-async    (modal)   (default '&')
    find           (modal)   (default 'f')
    find-back      (modal)   (default 'F')
    find-next                (default ';')
    find-prev                (default ',')
    search         (modal)   (default '/')
    search-back    (modal)   (default '?')
    search-next              (default 'n')
    search-prev              (default 'N')
    filter         (modal)
    setfilter
    mark-save      (modal)   (default 'm')
    mark-load      (modal)   (default "'")
    mark-remove    (modal)   (default '"')
    tag
    tag-toggle               (default 't')
.EE
.PP
The following command line commands are provided by lf:
.PP
.EX
    cmd-escape               (default '<esc>')
    cmd-complete             (default '<tab>')
    cmd-menu-complete
    cmd-menu-complete-back
    cmd-menu-accept
    cmd-enter                (default '<c-j>' and '<enter>')
    cmd-interrupt            (default '<c-c>')
    cmd-history-next         (default '<c-n>' and '<down>')
    cmd-history-prev         (default '<c-p>' and '<up>')
    cmd-left                 (default '<c-b>' and '<left>')
    cmd-right                (default '<c-f>' and '<right>')
    cmd-home                 (default '<c-a>' and '<home>')
    cmd-end                  (default '<c-e>' and '<end>')
    cmd-delete               (default '<c-d>' and '<delete>')
    cmd-delete-back          (default '<backspace>' and '<backspace2>')
    cmd-delete-home          (default '<c-u>')
    cmd-delete-end           (default '<c-k>')
    cmd-delete-unix-word     (default '<c-w>')
    cmd-yank                 (default '<c-y>')
    cmd-transpose            (default '<c-t>')
    cmd-transpose-word       (default '<a-t>')
    cmd-word                 (default '<a-f>')
    cmd-word-back            (default '<a-b>')
    cmd-delete-word          (default '<a-d>')
    cmd-delete-word-back     (default '<a-backspace>' and '<a-backspace2>')
    cmd-capitalize-word      (default '<a-c>')
    cmd-uppercase-word       (default '<a-u>')
    cmd-lowercase-word       (default '<a-l>')
.EE
.PP
The following options can be used to customize the behavior of lf:
.PP
.EX
    anchorfind       bool      (default true)
    autoquit         bool      (default false)
    borderfmt        string    (default "\e033[0m")
    cleaner          string    (default '')
    cursoractivefmt  string    (default "\e033[7m")
    cursorparentfmt  string    (default "\e033[7m")
    cursorpreviewfmt string    (default "\e033[4m")
    dircache         bool      (default true)
    dircounts        bool      (default false)
    dirfirst         bool      (default true)
    dironly          bool      (default false)
    dirpreviews      bool      (default false)
    drawbox          bool      (default false)
    dupfilefmt       string    (default '%f.~%n~')
    errorfmt         string    (default "\e033[7;31;47m")
    filesep          string    (default "\en")
    findlen          int       (default 1)
    globsearch       bool      (default false)
    hidden           bool      (default false)
    hiddenfiles      []string  (default '.*')
    history          bool      (default true)
    icons            bool      (default false)
    ifs              string    (default '')
    ignorecase       bool      (default true)
    ignoredia        bool      (default true)
    incfilter        bool      (default false)
    incsearch        bool      (default false)
    info             []string  (default '')
    infotimefmtnew   string    (default 'Jan _2 15:04')
    infotimefmtold   string    (default 'Jan _2  2006')
    mouse            bool      (default false)
    number           bool      (default false)
    numberfmt        string    (default "\e033[33m")
    period           int       (default 0)
    preserve         []string  (default "mode")
    preview          bool      (default true)
    previewer        string    (default '')
    promptfmt        string    (default "\e033[32;1m%u@%h\e033[0m:\e033[34;1m%d\e033[0m\e033[1m%f\e033[0m")
    ratios           []int     (default '1:2:3')
    relativenumber   bool      (default false)
    reverse          bool      (default false)
    ruler            []string  (default 'acc:progress:selection:filter:ind')
    rulerfmt         string    (default "  %a|  %p|  \e033[7;31m %m \e033[0m|  \e033[7;33m %c \e033[0m|  \e033[7;35m %s \e033[0m|  \e033[7;34m %f \e033[0m|  %i/%t")
    scrolloff        int       (default 0)
    selmode          string    (default 'all')
    shell            string    (default 'sh' for Unix and 'cmd' for Windows)
    shellflag        string    (default '-c' for Unix and '/c' for Windows)
    shellopts        []string  (default '')
    sixel            bool      (default false)
    smartcase        bool      (default true)
    smartdia         bool      (default false)
    sortby           string    (default 'natural')
    statfmt          string    (default "\e033[36m%p\e033[0m| %c| %u| %g| %S| %t| -> %l")
    tabstop          int       (default 8)
    tagfmt           string    (default "\e033[31m")
    tempmarks        string    (default '')
    timefmt          string    (default 'Mon Jan _2 15:04:05 2006')
    truncatechar     string    (default '~')
    truncatepct      int       (default 100)
    waitmsg          string    (default 'Press any key to continue')
    wrapscan         bool      (default true)
    wrapscroll       bool      (default false)
    user_{option}    string    (default none)
.EE
.PP
The following environment variables are exported for shell commands:
.PP
.EX
    f
    fs
    fx
    id
    PWD
    OLDPWD
    LF_LEVEL
    OPENER
    VISUAL
    EDITOR
    PAGER
    SHELL
    lf
    lf_{option}
    lf_user_{option}
    lf_width
    lf_height
    lf_count
.EE
.PP
The following special shell commands are used to customize the behavior of lf when defined:
.PP
.EX
    open
    paste
    rename
    delete
    pre-cd
    on-cd
    on-select
    on-redraw
    on-quit
.EE
.PP
The following commands/keybindings are provided by default:
.PP
.EX
    Unix
    cmd open &$OPENER "$f"
    map e $$EDITOR "$f"
    map i $$PAGER "$f"
    map w $$SHELL
    cmd doc $$lf -doc | $PAGER
    map <f-1> doc
    cmd maps $lf -remote "query $id maps" | $PAGER
    cmd cmaps $lf -remote "query $id cmaps" | $PAGER
    cmd cmds $lf -remote "query $id cmds" | $PAGER
.EE
.PP
.EX
    Windows
    cmd open &%OPENER% %f%
    map e $%EDITOR% %f%
    map i !%PAGER% %f%
    map w $%SHELL%
    cmd doc !%lf% -doc | %PAGER%
    map <f-1> doc
    cmd maps !%lf% -remote "query %id% maps" | %PAGER%
    cmd cmaps !%lf% -remote "query %id% cmaps" | %PAGER%
    cmd cmds !%lf% -remote "query %id% cmds" | %PAGER%
.EE
.PP
The following additional keybindings are provided by default:
.PP
.EX
    map zh set hidden!
    map zr set reverse!
    map zn set info
    map zs set info size
    map zt set info time
    map za set info size:time
    map sn :set sortby natural; set info
    map ss :set sortby size; set info size
    map st :set sortby time; set info time
    map sa :set sortby atime; set info atime
    map sc :set sortby ctime; set info ctime
    map se :set sortby ext; set info
    map gh cd ~
    map <space> :toggle; down
.EE
.PP
If the 'mouse' option is enabled, mouse buttons have the following default effects:
.PP
.EX
    Left mouse button
        Click on a file or directory to select it.
.EE
.PP
.EX
    Right mouse button
        Enter a directory or open a file. Also works on the preview window.
.EE
.PP
.EX
    Scroll wheel
        Move up or down. If Ctrl is pressed, scroll up or down.
.EE
.SH CONFIGURATION
Configuration files should be located at:
.PP
.EX
    OS       system-wide               user-specific
    Unix     /etc/lf/lfrc              ~/.config/lf/lfrc
    Windows  C:\eProgramData\elf\elfrc    C:\eUsers\e<user>\eAppData\eLocal\elf\elfrc
.EE
.PP
Colors file should be located at:
.PP
.EX
    OS       system-wide               user-specific
    Unix     /etc/lf/colors            ~/.config/lf/colors
    Windows  C:\eProgramData\elf\ecolors  C:\eUsers\e<user>\eAppData\eLocal\elf\ecolors
.EE
.PP
Icons file should be located at:
.PP
.EX
    OS       system-wide               user-specific
    Unix     /etc/lf/icons             ~/.config/lf/icons
    Windows  C:\eProgramData\elf\eicons   C:\eUsers\e<user>\eAppData\eLocal\elf\eicons
.EE
.PP
Selection file should be located at:
.PP
.EX
    Unix     ~/.local/share/lf/files
    Windows  C:\eUsers\e<user>\eAppData\eLocal\elf\efiles
.EE
.PP
Marks file should be located at:
.PP
.EX
    Unix     ~/.local/share/lf/marks
    Windows  C:\eUsers\e<user>\eAppData\eLocal\elf\emarks
.EE
.PP
Tags file should be located at:
.PP
.EX
    Unix     ~/.local/share/lf/tags
    Windows  C:\eUsers\e<user>\eAppData\eLocal\elf\etags
.EE
.PP
History file should be located at:
.PP
.EX
    Unix     ~/.local/share/lf/history
    Windows  C:\eUsers\e<user>\eAppData\eLocal\elf\ehistory
.EE
.PP
You can configure these locations with the following variables given with their order of precedences and their default values:
.PP
.EX
    Unix
        $LF_CONFIG_HOME
        $XDG_CONFIG_HOME
        ~/.config
.EE
.PP
.EX
        $LF_DATA_HOME
        $XDG_DATA_HOME
        ~/.local/share
.EE
.PP
.EX
    Windows
        %ProgramData%
        C:\eProgramData
.EE
.PP
.EX
        %LF_CONFIG_HOME%
        %LOCALAPPDATA%
        C:\eUsers\e<user>\eAppData\eLocal
.EE
.PP
A sample configuration file can be found at https://github.com/gokcehan/lf/blob/master/etc/lfrc.example
.SH COMMANDS
This section shows information about builtin commands. Modal commands do not take any arguments, but instead change the operation mode to read their input conveniently, and so they are meant to be assigned to keybindings.
.PP
.EX
    quit                     (default 'q')
.EE
.PP
Quit lf and return to the shell.
.PP
.EX
    up                       (default 'k' and '<up>')
    half-up                  (default '<c-u>')
    page-up                  (default '<c-b>' and '<pgup>')
    scroll-up                (default '<c-y>')
    down                     (default 'j' and '<down>')
    half-down                (default '<c-d>')
    page-down                (default '<c-f>' and '<pgdn>')
    scroll-down              (default '<c-e>')
.EE
.PP
Move/scroll the current file selection upwards/downwards by one/half a page/full page.
.PP
.EX
    updir                    (default 'h' and '<left>')
.EE
.PP
Change the current working directory to the parent directory.
.PP
.EX
    open                     (default 'l' and '<right>')
.EE
.PP
If the current file is a directory, then change the current directory to it, otherwise, execute the 'open' command. A default 'open' command is provided to call the default system opener asynchronously with the current file as the argument. A custom 'open' command can be defined to override this default.
.PP
.EX
    jump-next                (default ']')
    jump-prev                (default '[')
.EE
.PP
Change the current working directory to the next/previous jumplist item.
.PP
.EX
    top                      (default 'gg' and '<home>')
    bottom                   (default 'G' and '<end>')
.EE
.PP
Move the current file selection to the top/bottom of the directory. A count can be specified to move to a specific line, for example use `3G` to move to the third line.
.PP
.EX
    high                     (default 'H')
    middle                   (default 'M')
    low                      (default 'L')
.EE
.PP
Move the current file selection to the high/middle/low of the screen.
.PP
.EX
    toggle
.EE
.PP
Toggle the selection of the current file or files given as arguments.
.PP
.EX
    invert                   (default 'v')
.EE
.PP
Reverse the selection of all files in the current directory (i.e. 'toggle' all files). Selections in other directories are not effected by this command. You can define a new command to select all files in the directory by combining 'invert' with 'unselect' (i.e. 'cmd select-all :unselect; invert'), though this will also remove selections in other directories.
.PP
.EX
    invert-below
.EE
.PP
Reverse the selection (i.e. 'toggle') of all files at or after the current file in the current directory.
.PP
To select a contiguous block of files, use this command on the first file you want to select. Then, move down to the first file you do *not* want to select (the one after the end of the desired selection) and use this command again. This achieves an effect similar to the visual mode in vim.
.PP
This command is experimental and may be removed once a better replacement for the visual mode is implemented in 'lf'. If you'd like to experiment with using this command, you should bind it to a key (e.g. 'V') for a better experience.
.PP
.EX
    unselect                 (default 'u')
.EE
.PP
Remove the selection of all files in all directories.
.PP
.EX
    glob-select
    glob-unselect
.EE
.PP
Select/unselect files that match the given glob.
.PP
.EX
    calcdirsize
.EE
.PP
Calculate the total size for each of the selected directories. Option 'info' should include 'size' and option 'dircounts' should be disabled to show this size. If the total size of a directory is not calculated, it will be shown as '-'.
.PP
.EX
    clearmaps
.EE
.PP
Remove all keybindings associated with the `map` command. This command can be used in the config file to remove the default keybindings. For safety purposes, `:` is left mapped to the `read` command, and `cmap` keybindings are retained so that it is still possible to exit `lf` using `:quit`.
.PP
.EX
    copy                     (default 'y')
.EE
.PP
If there are no selections, save the path of the current file to the copy buffer, otherwise, copy the paths of selected files.
.PP
.EX
    cut                      (default 'd')
.EE
.PP
If there are no selections, save the path of the current file to the cut buffer, otherwise, copy the paths of selected files.
.PP
.EX
    paste                    (default 'p')
.EE
.PP
Copy/Move files in copy/cut buffer to the current working directory. A custom 'paste' command can be defined to override this default.
.PP
.EX
    clear                    (default 'c')
.EE
.PP
Clear file paths in copy/cut buffer.
.PP
.EX
    sync
.EE
.PP
Synchronize copied/cut files with server. This command is automatically called when required.
.PP
.EX
    draw
.EE
.PP
Draw the screen. This command is automatically called when required.
.PP
.EX
    redraw                   (default '<c-l>')
.EE
.PP
Synchronize the terminal and redraw the screen.
.PP
.EX
    load
.EE
.PP
Load modified files and directories. This command is automatically called when required.
.PP
.EX
    reload                   (default '<c-r>')
.EE
.PP
Flush the cache and reload all files and directories.
.PP
.EX
    echo
.EE
.PP
Print given arguments to the message line at the bottom.
.PP
.EX
    echomsg
.EE
.PP
Print given arguments to the message line at the bottom and also to the log file.
.PP
.EX
    echoerr
.EE
.PP
Print given arguments to the message line at the bottom as 'errorfmt' and also to the log file.
.PP
.EX
    cd
.EE
.PP
Change the working directory to the given argument.
.PP
.EX
    select
.EE
.PP
Change the current file selection to the given argument.
.PP
.EX
    delete         (modal)
.EE
.PP
Remove the current file or selected file(s). A custom 'delete' command can be defined to override this default.
.PP
.EX
    rename         (modal)   (default 'r')
.EE
.PP
Rename the current file using the builtin method. A custom 'rename' command can be defined to override this default.
.PP
.EX
    source
.EE
.PP
Read the configuration file given in the argument.
.PP
.EX
    push
.EE
.PP
Simulate key pushes given in the argument.
.PP
.EX
    read           (modal)   (default ':')
.EE
.PP
Read a command to evaluate.
.PP
.EX
    shell          (modal)   (default '$')
.EE
.PP
Read a shell command to execute.
.PP
.EX
    shell-pipe     (modal)   (default '%')
.EE
.PP
Read a shell command to execute piping its standard I/O to the bottom statline.
.PP
.EX
    shell-wait     (modal)   (default '!')
.EE
.PP
Read a shell command to execute and wait for a key press in the end.
.PP
.EX
    shell-async    (modal)   (default '&')
.EE
.PP
Read a shell command to execute asynchronously without standard I/O.
.PP
.EX
    find           (modal)   (default 'f')
    find-back      (modal)   (default 'F')
    find-next                (default ';')
    find-prev                (default ',')
.EE
.PP
Read key(s) to find the appropriate file name match in the forward/backward direction and jump to the next/previous match.
.PP
.EX
    search                   (default '/')
    search-back              (default '?')
    search-next              (default 'n')
    search-prev              (default 'N')
.EE
.PP
Read a pattern to search for a file name match in the forward/backward direction and jump to the next/previous match.
.PP
.EX
    filter         (modal)
    setfilter
.EE
.PP
Command 'filter' reads a pattern to filter out and only view files matching the pattern. Command 'setfilter' does the same but uses an argument to set the filter immediately. You can supply an argument to 'filter', in order to use that as the starting prompt.
.PP
.EX
    mark-save      (modal)   (default 'm')
.EE
.PP
Save the current directory as a bookmark assigned to the given key.
.PP
.EX
    mark-load      (modal)   (default "'")
.EE
.PP
Change the current directory to the bookmark assigned to the given key. A special bookmark "'" holds the previous directory after a 'mark-load', 'cd', or 'select' command.
.PP
.EX
    mark-remove    (modal)   (default '"')
.EE
.PP
Remove a bookmark assigned to the given key.
.PP
.EX
    tag
.EE
.PP
Tag a file with '*' or a single width character given in the argument. You can define a new tag clearing command by combining 'tag' with 'tag-toggle' (i.e. 'cmd tag-clear :tag; tag-toggle').
.PP
.EX
    tag-toggle               (default 't')
.EE
.PP
Tag a file with '*' or a single width character given in the argument if the file is untagged, otherwise remove the tag.
.SH COMMAND LINE COMMANDS
The prompt character specifies which of the several command-line modes you are in. For example, the 'read' command takes you to the ':' mode.
.PP
When the cursor is at the first character in ':' mode, pressing one of the keys '!', '$', '%', or '&' takes you to the corresponding mode. You can go back with 'cmd-delete-back' ('<backspace>' by default).
.PP
The command line commands should be mostly compatible with readline keybindings. A character refers to a unicode code point, a word consists of letters and digits, and a unix word consists of any non-blank characters.
.PP
.EX
    cmd-escape               (default '<esc>')
.EE
.PP
Quit command line mode and return to normal mode.
.PP
.EX
    cmd-complete             (default '<tab>')
.EE
.PP
Autocomplete the current word.
.PP
.EX
    cmd-menu-complete
    cmd-menu-complete-back
.EE
.PP
Autocomplete the current word with menu selection. You need to assign keys to these commands (e.g. 'cmap <tab> cmd-menu-complete; cmap <backtab> cmd-menu-complete-back'). You can use the assigned keys assigned to display the menu and then cycle through completion options.
.PP
.EX
    cmd-menu-accept
.EE
.PP
Accept the currently selected match in menu completion and close the menu.
.PP
.EX
    cmd-enter                (default '<c-j>' and '<enter>')
.EE
.PP
Execute the current line.
.PP
.EX
    cmd-interrupt            (default '<c-c>')
.EE
.PP
Interrupt the current shell-pipe command and return to the normal mode.
.PP
.EX
    cmd-history-next         (default '<c-n>' and '<down>')
    cmd-history-prev         (default '<c-p>' and '<up>')
.EE
.PP
Go to next/previous item in the history.
.PP
.EX
    cmd-left                 (default '<c-b>' and '<left>')
    cmd-right                (default '<c-f>' and '<right>')
.EE
.PP
Move the cursor to the left/right.
.PP
.EX
    cmd-home                 (default '<c-a>' and '<home>')
    cmd-end                  (default '<c-e>' and '<end>')
.EE
.PP
Move the cursor to the beginning/end of line.
.PP
.EX
    cmd-delete               (default '<c-d>' and '<delete>')
.EE
.PP
Delete the next character.
.PP
.EX
    cmd-delete-back          (default '<backspace>' and '<backspace2>')
.EE
.PP
Delete the previous character. When at the beginning of a prompt, returns either to normal mode or to ':' mode.
.PP
.EX
    cmd-delete-home          (default '<c-u>')
    cmd-delete-end           (default '<c-k>')
.EE
.PP
Delete everything up to the beginning/end of line.
.PP
.EX
    cmd-delete-unix-word     (default '<c-w>')
.EE
.PP
Delete the previous unix word.
.PP
.EX
    cmd-yank                 (default '<c-y>')
.EE
.PP
Paste the buffer content containing the last deleted item.
.PP
.EX
    cmd-transpose            (default '<c-t>')
    cmd-transpose-word       (default '<a-t>')
.EE
.PP
Transpose the positions of last two characters/words.
.PP
.EX
    cmd-word                 (default '<a-f>')
    cmd-word-back            (default '<a-b>')
.EE
.PP
Move the cursor by one word in forward/backward direction.
.PP
.EX
    cmd-delete-word          (default '<a-d>')
.EE
.PP
Delete the next word in forward direction.
.PP
.EX
    cmd-delete-word-back     (default '<a-backspace>' and '<a-backspace2>')
.EE
.PP
Delete the previous word in backward direction.
.PP
.EX
    cmd-capitalize-word      (default '<a-c>')
    cmd-uppercase-word       (default '<a-u>')
    cmd-lowercase-word       (default '<a-l>')
.EE
.PP
Capitalize/uppercase/lowercase the current word and jump to the next word.
.SH OPTIONS
This section shows information about options to customize the behavior. Character ':' is used as the separator for list options '[]int' and '[]string'.
.PP
.EX
    anchorfind     bool      (default true)
.EE
.PP
When this option is enabled, find command starts matching patterns from the beginning of file names, otherwise, it can match at an arbitrary position.
.PP
.EX
    autoquit       bool      (default false)
.EE
.PP
Automatically quit server when there are no clients left connected.
.PP
.EX
    borderfmt      string    (default "\e033[0m")
.EE
.PP
Format string of the box drawing characters enabled by the `drawbox` option.
.PP
.EX
    cleaner        string    (default '') (not called if empty)
.EE
.PP
Set the path of a cleaner file. The file should be executable. This file is called if previewing is enabled, the previewer is set, and the previously selected file had its preview cache disabled. The following arguments are passed to the file, (1) current file name, (2) width, (3) height, (4) horizontal position, (5) vertical position of preview pane and (6) next file name to be previewed respectively. Preview cleaning is disabled when the value of this option is left empty.
.PP
.EX
    cursoractivefmt   string    (default "\e033[7m")
    cursorparentfmt   string    (default "\e033[7m")
    cursorpreviewfmt  string    (default "\e033[4m")
.EE
.PP
Format strings for highlighting the cursor. `cursoractivefmt` applies in the current directory pane, `cursorparentfmt` applies in panes that show parents of the current directory, and `cursorpreviewfmt` applies in panes that preview directories.
.PP
The default is to make the active cursor and the parent directory cursor inverted. The preview cursor is underlined.
.PP
Some other possibilities to consider for the preview or parent cursors: an empty string for no cursor, "\e033[7;2m" for dimmed inverted text (visibility varies by terminal), "\e033[7;90m" for inverted text with grey (aka "brightblack") background.
.PP
If the format string contains the characters `%s`, it is interpreted as a format string for `fmt.Sprintf`. Such a string should end with the terminal reset sequence. For example, "\e033[4m%s\e033[0m" has the same effect as "\e033[4m".
.PP
.EX
    dircache       bool      (default true)
.EE
.PP
Cache directory contents.
.PP
.EX
    dircounts      bool      (default false)
.EE
.PP
When this option is enabled, directory sizes show the number of items inside instead of the total size of the directory, which needs to be calculated for each directory using 'calcdirsize'. This information needs to be calculated by reading the directory and counting the items inside. Therefore, this option is disabled by default for performance reasons. This option only has an effect when 'info' has a 'size' field and the pane is wide enough to show the information. 999 items are counted per directory at most, and bigger directories are shown as '999+'.
.PP
.EX
    dirfirst       bool      (default true)
.EE
.PP
Show directories first above regular files.
.PP
.EX
    dironly        bool      (default false)
.EE
.PP
Show only directories.
.PP
.EX
    dirpreviews    bool      (default false)
.EE
.PP
If enabled, directories will also be passed to the previewer script. This allows custom previews for directories.
.PP
.EX
    drawbox        bool      (default false)
.EE
.PP
Draw boxes around panes with box drawing characters.
.PP
.EX
    dupfilefmt        string      (default '%f.~%n~')
.EE
.PP
Format string of file name when creating duplicate files. With the default format, copying a file `abc.txt` to the same directory will result in a duplicate file called `abc.txt.~1~`. Special expansions are provided, '%f' as the file name, '%b' for basename (file name without extension), '%e' as the extension (including the dot) and '%n' as the number of duplicates.
.PP
.EX
    errorfmt       string    (default "\e033[7;31;47m")
.EE
.PP
Format string of error messages shown in the bottom message line.
.PP
If the format string contains the characters `%s`, it is interpreted as a format string for `fmt.Sprintf`. Such a string should end with the terminal reset sequence. For example, "\e033[4m%s\e033[0m" has the same effect as "\e033[4m".
.PP
.EX
    filesep        string    (default "\en")
.EE
.PP
File separator used in environment variables 'fs' and 'fx'.
.PP
.EX
    findlen        int       (default 1)
.EE
.PP
Number of characters prompted for the find command. When this value is set to 0, find command prompts until there is only a single match left.
.PP
.EX
    globsearch     bool      (default false)
.EE
.PP
When this option is enabled, search command patterns are considered as globs, otherwise they are literals. With globbing, '*' matches any sequence, '?' matches any character, and '[...]' or '[^...]' matches character sets or ranges. Otherwise, these characters are interpreted as they are.
.PP
.EX
    hidden         bool      (default false)
.EE
.PP
Show hidden files. On Unix systems, hidden files are determined by the value of 'hiddenfiles'. On Windows, only files with hidden attributes are considered hidden files.
.PP
.EX
    hiddenfiles    []string  (default '.*')
.EE
.PP
List of hidden file glob patterns. Patterns can be given as relative or absolute paths. Globbing supports the usual special characters, '*' to match any sequence, '?' to match any character, and '[...]' or '[^...]' to match character sets or ranges. In addition, if a pattern starts with '!', then its matches are excluded from hidden files. To add multiple patterns, use ':' as a separator. Example: '.*:lost+found:*.bak'
.PP
.EX
    history        bool      (default true)
.EE
.PP
Save command history.
.PP
.EX
    icons          bool      (default false)
.EE
.PP
Show icons before each item in the list.
.PP
.EX
    ifs            string    (default '')
.EE
.PP
Sets 'IFS' variable in shell commands. It works by adding the assignment to the beginning of the command string as "IFS='...'; ...". The reason is that 'IFS' variable is not inherited by the shell for security reasons. This method assumes a POSIX shell syntax and so it can fail for non-POSIX shells. This option has no effect when the value is left empty. This option does not have any effect on Windows.
.PP
.EX
    ignorecase     bool      (default true)
.EE
.PP
Ignore case in sorting and search patterns.
.PP
.EX
    ignoredia      bool      (default true)
.EE
.PP
Ignore diacritics in sorting and search patterns.
.PP
.EX
    incsearch      bool      (default false)
.EE
.PP
Jump to the first match after each keystroke during searching.
.PP
.EX
    incfilter      bool      (default false)
.EE
.PP
Apply filter pattern after each keystroke during filtering.
.PP
.EX
    info           []string  (default '')
.EE
.PP
List of information shown for directory items at the right side of pane. Currently supported information types are 'size', 'time', 'atime', and 'ctime'. Information is only shown when the pane width is more than twice the width of information.
.PP
.EX
    infotimefmtnew string    (default 'Jan _2 15:04')
.EE
.PP
Format string of the file time shown in the info column when it matches this year.
.PP
.EX
    infotimefmtold string    (default 'Jan _2  2006')
.EE
.PP
Format string of the file time shown in the info column when it doesn't match this year.
.PP
.EX
    mouse          bool      (default false)
.EE
.PP
Send mouse events as input.
.PP
.EX
    number         bool      (default false)
.EE
.PP
Show the position number for directory items at the left side of pane. When 'relativenumber' option is enabled, only the current line shows the absolute position and relative positions are shown for the rest.
.PP
.EX
    numberfmt      string    (default "\e033[33m")
.EE
.PP
Format string of the position number for each line.
.PP
.EX
    period         int       (default 0)
.EE
.PP
Set the interval in seconds for periodic checks of directory updates. This works by periodically calling the 'load' command. Note that directories are already updated automatically in many cases. This option can be useful when there is an external process changing the displayed directory and you are not doing anything in lf. Periodic checks are disabled when the value of this option is set to zero.
.PP
.EX
    preserve       []string  (default 'mode')
.EE
.PP
List of attributes that are preserved when copying files. Currently supported attributes are 'mode' (i.a. access mode) and 'timestamps' (i.e. modification time and access time). Note, preserving other attribute like ownership of change/birth timestamp is desirable, but not portably supported in Go.
.PP
.EX
    preview        bool      (default true)
.EE
.PP
Show previews of files and directories at the right most pane. If the file has more lines than the preview pane, rest of the lines are not read. Files containing the null character (U+0000) in the read portion are considered binary files and displayed as 'binary'.
.PP
.EX
    previewer      string    (default '') (not filtered if empty)
.EE
.PP
Set the path of a previewer file to filter the content of regular files for previewing. The file should be executable. The following arguments are passed to the file, (1) current file name, (2) width, (3) height, (4) horizontal position, and (5) vertical position of preview pane respectively. SIGPIPE signal is sent when enough lines are read. If the previewer returns a non-zero exit code, then the preview cache for the given file is disabled. This means that if the file is selected in the future, the previewer is called once again. Preview filtering is disabled and files are displayed as they are when the value of this option is left empty.
.PP
.EX
    promptfmt      string    (default "\e033[32;1m%u@%h\e033[0m:\e033[34;1m%d\e033[0m\e033[1m%f\e033[0m")
.EE
.PP
Format string of the prompt shown in the top line. Special expansions are provided, '%u' as the user name, '%h' as the host name, '%w' as the working directory, '%d' as the working directory with a trailing path separator, '%f' as the file name, and '%F' as the current filter. '%S' may be used once and will provide a spacer so that the following parts are right aligned on the screen. Home folder is shown as '~' in the working directory expansion. Directory names are automatically shortened to a single character starting from the left most parent when the prompt does not fit to the screen.
.PP
.EX
    ratios         []int     (default '1:2:3')
.EE
.PP
List of ratios of pane widths. Number of items in the list determines the number of panes in the ui. When 'preview' option is enabled, the right most number is used for the width of preview pane.
.PP
.EX
    relativenumber bool      (default false)
.EE
.PP
Show the position number relative to the current line. When 'number' is enabled, current line shows the absolute position, otherwise nothing is shown.
.PP
.EX
    reverse        bool      (default false)
.EE
.PP
Reverse the direction of sort.
.PP
.EX
    ruler          []string  (default 'acc:progress:selection:filter:ind')
.EE
.PP
This option is deprecated in favor of using the `rulerfmt` option (see below). List of information shown in status line ruler. Currently supported information types are 'acc', 'progress', 'selection', 'filter', 'ind', 'df' and names starting with 'lf_'. `acc` shows the pressed keys (e.g. for bindings with multiple key presses or counts given to bindings). `progress` shows the progress of file operations (e.g. copying a large directory). `selection` shows the number of files that are selected, or designated for being cut/copied. `filter` shows 'F' if a filter is currently being applied. `ind` shows the current position of the cursor as well as the number of files in the current directory. `df` shows the amount of free disk space remaining. Names starting with `lf_` show the value of environment variables exported by lf. This is useful for displaying the current settings (e.g. `lf_selmode` displays the current setting for the `selmode` option). User defined options starting with `lf_user_` are also supported, so it is possible to display information set from external sources.
.PP
.EX
    rulerfmt       string    (default "  %a|  %p|  \e033[7;31m %m \e033[0m|  \e033[7;33m %c \e033[0m|  \e033[7;35m %s \e033[0m|  \e033[7;34m %f \e033[0m|  %i/%t")
.EE
.PP
Format string of the ruler shown in the bottom right corner. Special expansions are provided, '%a' as the pressed keys, '%p' as the progress of file operations, '%m' as the number of files to be cut (moved), '%c' as the number of files to be copied, '%s' as the number of selected files, '%f' as the filter, '%i' as the position of the cursor, '%t' as the number of files shown in the current directory, '%h' as the number of files hidden in the current directory, and '%d' as the amount of free disk space remaining. Additional expansions are provided for environment variables exported by lf, in the form `%{lf_<name>}` (e.g. `%{lf_selmode}`). This is useful for displaying the current settings. Expansions are also provided for user defined options, in the form `%{lf_user_<name>}` (e.g. `%{lf_user_foo}`). The `|` character splits the format string into sections. Any section containing a failed expansion (result is a blank string) is discarded and not shown.
.PP
.EX
    selmode        string    (default 'all')
.EE
.PP
Selection mode for commands. When set to 'all' it will use the selected files from all directories. When set to 'dir' it will only use the selected files in the current directory.
.PP
.EX
    scrolloff      int       (default 0)
.EE
.PP
Minimum number of offset lines shown at all times in the top and the bottom of the screen when scrolling. The current line is kept in the middle when this option is set to a large value that is bigger than the half of number of lines. A smaller offset can be used when the current file is close to the beginning or end of the list to show the maximum number of items.
.PP
.EX
    shell          string    (default 'sh' for Unix and 'cmd' for Windows)
.EE
.PP
Shell executable to use for shell commands. Shell commands are executed as 'shell shellopts shellflag command -- arguments'.
.PP
.EX
    shellflag      string    (default '-c' for Unix and '/c' for Windows)
.EE
.PP
Command line flag used to pass shell commands.
.PP
.EX
    shellopts      []string  (default '')
.EE
.PP
List of shell options to pass to the shell executable.
.PP
.EX
    sixel          bool      (default false)
.EE
.PP
Render sixel images in preview.
.PP
.EX
    smartcase      bool      (default true)
.EE
.PP
Override 'ignorecase' option when the pattern contains an uppercase character. This option has no effect when 'ignorecase' is disabled.
.PP
.EX
    smartdia       bool      (default false)
.EE
.PP
Override 'ignoredia' option when the pattern contains a character with diacritic. This option has no effect when 'ignoredia' is disabled.
.PP
.EX
    sortby         string    (default 'natural')
.EE
.PP
Sort type for directories. Currently supported sort types are 'natural', 'name', 'size', 'time', 'ctime', 'atime', and 'ext'.
.PP
.EX
    statfmt    string        (default "\e033[36m%p\e033[0m| %c| %u| %g| %S| %t| -> %l")
.EE
.PP
Format string of the file info shown in the bottom left corner. Special expansions are provided, '%p' as the file permissions, '%c' as the link count, '%u' as the user, '%g' as the group, '%s' as the file size, '%S' as the file size but with a fixed width of four characters (left-padded with spaces), '%t' as the last modified time, and '%l' as the link target. The `|` character splits the format string into sections. Any section containing a failed expansion (result is a blank string) is discarded and not shown.
.PP
.EX
    tabstop        int       (default 8)
.EE
.PP
Number of space characters to show for horizontal tabulation (U+0009) character.
.PP
.EX
    tagfmt         string    (default "\e033[31m")
.EE
.PP
Format string of the tags.
.PP
If the format string contains the characters `%s`, it is interpreted as a format string for `fmt.Sprintf`. Such a string should end with the terminal reset sequence. For example, "\e033[4m%s\e033[0m" has the same effect as "\e033[4m".
.PP
.EX
    tempmarks      string    (default '')
.EE
.PP
Marks to be considered temporary (e.g. 'abc' refers to marks 'a', 'b', and 'c'). These marks are not synced to other clients and they are not saved in the bookmarks file. Note that the special bookmark "'" is always treated as temporary and it does not need to be specified.
.PP
.EX
    timefmt        string    (default 'Mon Jan _2 15:04:05 2006')
.EE
.PP
Format string of the file modification time shown in the bottom line.
.PP
.EX
    truncatechar   string    (default '~')
.EE
.PP
Truncate character shown at the end when the file name does not fit to the pane.
.PP
.EX
    truncatepct  int       (default 100)
.EE
.PP
When a filename is too long to be shown completely, the available space is partitioned in two pieces. truncatepct defines a fraction (in percent between 0 and 100) for the size of the first piece, which will show the beginning of the filename. The second piece will show the end of the filename and will use the rest of the available space. Both pieces are separated by the truncation character (truncatechar). A value of 100 will only show the beginning of the filename, while a value of 0 will only show the end of the filename, e.g.:
.PP
- `set truncatepct 100` -> "very-long-filename-tr~" (default)
.PP
- `set truncatepct 50` -> "very-long-f~-truncated"
.PP
- `set truncatepct 0` -> "~ng-filename-truncated"
.PP
.EX
    waitmsg        string    (default 'Press any key to continue')
.EE
.PP
String shown after commands of shell-wait type.
.PP
.EX
    wrapscan       bool      (default true)
.EE
.PP
Searching can wrap around the file list.
.PP
.EX
    wrapscroll     bool      (default false)
.EE
.PP
Scrolling can wrap around the file list.
.PP
.EX
    user_{option}  string    (default none)
.EE
.PP
Any option that is prefixed with 'user_' is a user defined option and can be set to any string. Inside a user defined command the value will be provided in the `lf_user_{option}` environment variable. These options are not used by lf and are not persisted.
.SH ENVIRONMENT VARIABLES
The following variables are exported for shell commands: These are referred with a '$' prefix on POSIX shells (e.g. '$f'), between '%' characters on Windows cmd (e.g. '%f%'), and with a '$env:' prefix on Windows powershell (e.g. '$env:f').
.PP
.EX
    f
.EE
.PP
Current file selection as a full path.
.PP
.EX
    fs
.EE
.PP
Selected file(s) separated with the value of 'filesep' option as full path(s).
.PP
.EX
    fx
.EE
.PP
Selected file(s) (i.e. 'fs') if there are any selected files, otherwise current file selection (i.e. 'f').
.PP
.EX
    id
.EE
.PP
Id of the running client.
.PP
.EX
    PWD
.EE
.PP
Present working directory.
.PP
.EX
    OLDPWD
.EE
.PP
Initial working directory.
.PP
.EX
    LF_LEVEL
.EE
.PP
The value of this variable is set to the current nesting level when you run lf from a shell spawned inside lf. You can add the value of this variable to your shell prompt to make it clear that your shell runs inside lf. For example, with POSIX shells, you can use '[ -n "$LF_LEVEL" ] && PS1="$PS1""(lf level: $LF_LEVEL) "' in your shell configuration file (e.g. '~/.bashrc').
.PP
.EX
    OPENER
.EE
.PP
If this variable is set in the environment, use the same value. Otherwise, this is set to 'start' in Windows, 'open' in MacOS, 'xdg-open' in others.
.PP
.EX
    EDITOR
.EE
.PP
If VISUAL is set in the environment, use its value. Otherwise, use the value of the environment variable EDITOR. If neither variable is set, this is set to 'vi' on Unix, 'notepad' in Windows.
.PP
.EX
    PAGER
.EE
.PP
If this variable is set in the environment, use the same value. Otherwise, this is set to 'less' on Unix, 'more' in Windows.
.PP
.EX
    SHELL
.EE
.PP
If this variable is set in the environment, use the same value. Otherwise, this is set to 'sh' on Unix, 'cmd' in Windows.
.PP
.EX
    lf
.EE
.PP
Absolute path to the currently running lf binary, if it can be found. Otherwise, this is set to the string 'lf'.
.PP
.EX
    lf_{option}
.EE
.PP
Value of the {option}.
.PP
.EX
    lf_user_{option}
.EE
.PP
Value of the user_{option}.
.PP
.EX
    lf_width
    lf_height
.EE
.PP
Width/Height of the terminal.
.PP
.EX
    lf_count
.EE
.PP
Value of the count associated with the current command.
.SH SPECIAL COMMANDS
This section shows information about special shell commands.
.PP
.EX
    open
.EE
.PP
This shell command can be defined to override the default 'open' command when the current file is not a directory.
.PP
.EX
    paste
.EE
.PP
This shell command can be defined to override the default 'paste' command.
.PP
.EX
    rename
.EE
.PP
This shell command can be defined to override the default 'rename' command.
.PP
.EX
    delete
.EE
.PP
This shell command can be defined to override the default 'delete' command.
.PP
.EX
    pre-cd
.EE
.PP
This shell command can be defined to be executed before changing a directory.
.PP
.EX
    on-cd
.EE
.PP
This shell command can be defined to be executed after changing a directory.
.PP
.EX
    on-select
.EE
.PP
This shell command can be defined to be executed after the selection changes.
.PP
.EX
    on-redraw
.EE
.PP
This shell command can be defined to be executed after the screen is redrawn or if the terminal is resized.
.PP
.EX
    on-quit
.EE
.PP
This shell command can be defined to be executed before quit.
.SH PREFIXES
The following command prefixes are used by lf:
.PP
.EX
    :  read (default)  builtin/custom command
    $  shell           shell command
    %  shell-pipe      shell command running with the ui
    !  shell-wait      shell command waiting for key press
    &  shell-async     shell command running asynchronously
.EE
.PP
The same evaluator is used for the command line and the configuration file for read and shell commands. The difference is that prefixes are not necessary in the command line. Instead, different modes are provided to read corresponding commands. These modes are mapped to the prefix keys above by default.
.SH SYNTAX
Characters from '#' to newline are comments and ignored:
.PP
.EX
    # comments start with '#'
.EE
.PP
There are five special commands ('set', 'setlocal', 'map', 'cmap', and 'cmd') for configuration.
.PP
Command 'set' is used to set an option which can be boolean, integer, or string:
.PP
.EX
    set hidden         # boolean enable
    set hidden true    # boolean enable
    set nohidden       # boolean disable
    set hidden false   # boolean disable
    set hidden!        # boolean toggle
    set scrolloff 10   # integer value
    set sortby time    # string value w/o quotes
    set sortby 'time'  # string value with single quotes (whitespaces)
    set sortby "time"  # string value with double quotes (backslash escapes)
.EE
.PP
Command 'setlocal' is used to set a local option for a directory which can be boolean or string. Currently supported local options are 'dirfirst', 'dironly', 'hidden', 'info', 'reverse', and 'sortby'. Adding a trailing path separator (i.e. '/' for Unix and '\e' for Windows) sets the option for the given directory along with its subdirectories:
.PP
.EX
    setlocal /foo/bar hidden         # boolean enable
    setlocal /foo/bar hidden true    # boolean enable
    setlocal /foo/bar nohidden       # boolean disable
    setlocal /foo/bar hidden false   # boolean disable
    setlocal /foo/bar hidden!        # boolean toggle
    setlocal /foo/bar sortby time    # string value w/o quotes
    setlocal /foo/bar sortby 'time'  # string value with single quotes (whitespaces)
    setlocal /foo/bar sortby "time"  # string value with double quotes (backslash escapes)
    setlocal /foo/bar  hidden        # for only '/foo/bar' directory
    setlocal /foo/bar/ hidden        # for '/foo/bar' and its subdirectories (e.g. '/foo/bar/baz')
.EE
.PP
Command 'map' is used to bind a key to a command which can be builtin command, custom command, or shell command:
.PP
.EX
    map gh cd ~        # builtin command
    map D trash        # custom command
    map i $less $f     # shell command
    map U !du -csh *   # waiting shell command
.EE
.PP
Command 'cmap' is used to bind a key on the command line to a command line command or any other command:
.PP
.EX
    cmap <c-g> cmd-escape
    cmap <a-i> set incsearch!
.EE
.PP
You can delete an existing binding by leaving the expression empty:
.PP
.EX
    map gh             # deletes 'gh' mapping
    cmap <c-g>         # deletes '<c-g>' mapping
.EE
.PP
Command 'cmd' is used to define a custom command:
.PP
.EX
    cmd usage $du -h -d1 | less
.EE
.PP
You can delete an existing command by leaving the expression empty:
.PP
.EX
    cmd trash          # deletes 'trash' command
.EE
.PP
If there is no prefix then ':' is assumed:
.PP
.EX
    map zt set info time
.EE
.PP
An explicit ':' can be provided to group statements until a newline which is especially useful for 'map' and 'cmd' commands:
.PP
.EX
    map st :set sortby time; set info time
.EE
.PP
If you need multiline you can wrap statements in '{{' and '}}' after the proper prefix.
.PP
.EX
    map st :{{
        set sortby time
        set info time
    }}
.EE
.SH KEY MAPPINGS
Regular keys are assigned to a command with the usual syntax:
.PP
.EX
    map a down
.EE
.PP
Keys combined with the shift key simply use the uppercase letter:
.PP
.EX
    map A down
.EE
.PP
Special keys are written in between '<' and '>' characters and always use lowercase letters:
.PP
.EX
    map <enter> down
.EE
.PP
Angle brackets can be assigned with their special names:
.PP
.EX
    map <lt> down
    map <gt> down
.EE
.PP
Function keys are prefixed with 'f' character:
.PP
.EX
    map <f-1> down
.EE
.PP
Keys combined with the control key are prefixed with 'c' character:
.PP
.EX
    map <c-a> down
.EE
.PP
Keys combined with the alt key are assigned in two different ways depending on the behavior of your terminal. Older terminals (e.g. xterm) may set the 8th bit of a character when the alt key is pressed. On these terminals, you can use the corresponding byte for the mapping:
.PP
.EX
    map á down
.EE
.PP
Newer terminals (e.g. gnome-terminal) may prefix the key with an escape key when the alt key is pressed. lf uses the escape delaying mechanism to recognize alt keys in these terminals (delay is 100ms). On these terminals, keys combined with the alt key are prefixed with 'a' character:
.PP
.EX
    map <a-a> down
.EE
.PP
It is possible to combine special keys with modifiers:
.PP
.EX
    map <a-enter> down
.EE
.PP
WARNING: Some key combinations will likely be intercepted by your OS, window manager, or terminal. Other key combinations cannot be recognized by lf due to the way terminals work (e.g. `Ctrl+h` combination sends a backspace key instead). The easiest way to find out the name of a key combination and whether it will work on your system is to press the key while lf is running and read the name from the "unknown mapping" error.
.PP
Mouse buttons are prefixed with 'm' character:
.PP
.EX
    map <m-1> down  # primary
    map <m-2> down  # secondary
    map <m-3> down  # middle
    map <m-4> down
    map <m-5> down
    map <m-6> down
    map <m-7> down
    map <m-8> down
.EE
.PP
Mouse wheel events are also prefixed with 'm' character:
.PP
.EX
    map <m-up>    down
    map <m-down>  down
    map <m-left>  down
    map <m-right> down
.EE
.SH PUSH MAPPINGS
The usual way to map a key sequence is to assign it to a named or unnamed command. While this provides a clean way to remap builtin keys as well as other commands, it can be limiting at times. For this reason 'push' command is provided by lf. This command is used to simulate key pushes given as its arguments. You can 'map' a key to a 'push' command with an argument to create various keybindings.
.PP
This is mainly useful for two purposes. First, it can be used to map a command with a command count:
.PP
.EX
    map <c-j> push 10j
.EE
.PP
Second, it can be used to avoid typing the name when a command takes arguments:
.PP
.EX
    map r push :rename<space>
.EE
.PP
One thing to be careful is that since 'push' command works with keys instead of commands it is possible to accidentally create recursive bindings:
.PP
.EX
    map j push 2j
.EE
.PP
These types of bindings create a deadlock when executed.
.SH SHELL COMMANDS
Regular shell commands are the most basic command type that is useful for many purposes. For example, we can write a shell command to move selected file(s) to trash. A first attempt to write such a command may look like this:
.PP
.EX
    cmd trash ${{
        mkdir -p ~/.trash
        if [ -z "$fs" ]; then
            mv "$f" ~/.trash
        else
            IFS="$(printf '\en\et')"; mv $fs ~/.trash
        fi
    }}
.EE
.PP
We check '$fs' to see if there are any selected files. Otherwise we just delete the current file. Since this is such a common pattern, a separate '$fx' variable is provided. We can use this variable to get rid of the conditional:
.PP
.EX
    cmd trash ${{
        mkdir -p ~/.trash
        IFS="$(printf '\en\et')"; mv $fx ~/.trash
    }}
.EE
.PP
The trash directory is checked each time the command is executed. We can move it outside of the command so it would only run once at startup:
.PP
.EX
    ${{ mkdir -p ~/.trash }}
.EE
.PP
.EX
    cmd trash ${{ IFS="$(printf '\en\et')"; mv $fx ~/.trash }}
.EE
.PP
Since these are one liners, we can drop '{{' and '}}':
.PP
.EX
    $mkdir -p ~/.trash
.EE
.PP
.EX
    cmd trash $IFS="$(printf '\en\et')"; mv $fx ~/.trash
.EE
.PP
Finally note that we set 'IFS' variable manually in these commands. Instead we could use the 'ifs' option to set it for all shell commands (i.e. 'set ifs "\en"'). This can be especially useful for interactive use (e.g. '$rm $f' or '$rm $fs' would simply work). This option is not set by default as it can behave unexpectedly for new users. However, use of this option is highly recommended and it is assumed in the rest of the documentation.
.SH PIPING SHELL COMMANDS
Regular shell commands have some limitations in some cases. When an output or error message is given and the command exits afterwards, the ui is immediately resumed and there is no way to see the message without dropping to shell again. Also, even when there is no output or error, the ui still needs to be paused while the command is running. This can cause flickering on the screen for short commands and similar distractions for longer commands.
.PP
Instead of pausing the ui, piping shell commands connects stdin, stdout, and stderr of the command to the statline in the bottom of the ui. This can be useful for programs following the Unix philosophy to give no output in the success case, and brief error messages or prompts in other cases.
.PP
For example, following rename command prompts for overwrite in the statline if there is an existing file with the given name:
.PP
.EX
    cmd rename %mv -i $f $1
.EE
.PP
You can also output error messages in the command and it will show up in the statline. For example, an alternative rename command may look like this:
.PP
.EX
    cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
.EE
.PP
Note that input is line buffered and output and error are byte buffered.
.SH WAITING SHELL COMMANDS
Waiting shell commands are similar to regular shell commands except that they wait for a key press when the command is finished. These can be useful to see the output of a program before the ui is resumed. Waiting shell commands are more appropriate than piping shell commands when the command is verbose and the output is best displayed as multiline.
.SH ASYNCHRONOUS SHELL COMMANDS
Asynchronous shell commands are used to start a command in the background and then resume operation without waiting for the command to finish. Stdin, stdout, and stderr of the command is neither connected to the terminal nor to the ui.
.SH REMOTE COMMANDS
One of the more advanced features in lf is remote commands. All clients connect to a server on startup. It is possible to send commands to all or any of the connected clients over the common server. This is used internally to notify file selection changes to other clients.
.PP
To use this feature, you need to use a client which supports communicating with a Unix domain socket. OpenBSD implementation of netcat (nc) is one such example. You can use it to send a command to the socket file:
.PP
.EX
    echo 'send echo hello world' | nc -U ${XDG_RUNTIME_DIR:-/tmp}/lf.${USER}.sock
.EE
.PP
Since such a client may not be available everywhere, lf comes bundled with a command line flag to be used as such. When using lf, you do not need to specify the address of the socket file. This is the recommended way of using remote commands since it is shorter and immune to socket file address changes:
.PP
.EX
    lf -remote 'send echo hello world'
.EE
.PP
In this command 'send' is used to send the rest of the string as a command to all connected clients. You can optionally give it an id number to send a command to a single client:
.PP
.EX
    lf -remote 'send 1234 echo hello world'
.EE
.PP
All clients have a unique id number but you may not be aware of the id number when you are writing a command. For this purpose, an '$id' variable is exported to the environment for shell commands. The value of this variable is set to the process id of the client. You can use it to send a remote command from a client to the server which in return sends a command back to itself. So now you can display a message in the current client by calling the following in a shell command:
.PP
.EX
    lf -remote "send $id echo hello world"
.EE
.PP
Since lf does not have control flow syntax, remote commands are used for such needs. For example, you can configure the number of columns in the ui with respect to the terminal width as follows:
.PP
.EX
    cmd recol %{{
        if [ $lf_width -le 80 ]; then
            lf -remote "send $id set ratios 1:2"
        elif [ $lf_width -le 160 ]; then
            lf -remote "send $id set ratios 1:2:3"
        else
            lf -remote "send $id set ratios 1:2:3:5"
        fi
    }}
.EE
.PP
In addition, the 'query' command can be used to obtain information about a specific lf instance by providing its id:
.PP
.EX
    lf -remote "query $id maps"
.EE
.PP
The following types of information are supported:
.PP
.EX
    maps     list of mappings created by the 'map' command
    cmaps    list of mappings created by the 'cmap' command
    cmds     list of commands created by the 'cmd' command
    jumps    contents of the jump list, showing previously visited locations
    history  list of previously executed commands on the command line
.EE
.PP
This is useful for scripting actions based on the internal state of lf. For example, to select a previous command using fzf and execute it:
.PP
.EX
    map <a-h> ${{
    	clear
    	cmd=$(
    		lf -remote "query $id history" |
    		awk -F'\et' 'NR > 1 { print $NF}' |
    		sort -u |
    		fzf --reverse --prompt='Execute command: '
    	)
    	lf -remote "send $id $cmd"
    }}
.EE
.PP
There is also a 'quit' command to quit the server when there are no connected clients left, and a 'quit!' command to force quit the server by closing client connections first:
.PP
.EX
    lf -remote 'quit'
    lf -remote 'quit!'
.EE
.PP
Lastly, there is a 'conn' command to connect the server as a client. This should not be needed for users.
.SH FILE OPERATIONS
lf uses its own builtin copy and move operations by default. These are implemented as asynchronous operations and progress is shown in the bottom ruler. These commands do not overwrite existing files or directories with the same name. Instead, a suffix that is compatible with '--backup=numbered' option in GNU cp is added to the new files or directories. Only file modes and (some) timestamps can be preserved (see `preserve` option), all other attributes are ignored including ownership, context, and xattr. Special files such as character and block devices, named pipes, and sockets are skipped and links are not followed. Moving is performed using the rename operation of the underlying OS. For cross-device moving, lf falls back to copying and then deletes the original files if there are no errors. Operation errors are shown in the message line as well as the log file and they do not preemptively finish the corresponding file operation.
.PP
File operations can be performed on the current selected file or alternatively on multiple files by selecting them first. When you 'copy' a file, lf doesn't actually copy the file on the disk, but only records its name to a file. The actual file copying takes place when you 'paste'. Similarly 'paste' after a 'cut' operation moves the file.
.PP
You can customize copy and move operations by defining a 'paste' command. This is a special command that is called when it is defined instead of the builtin implementation. You can use the following example as a starting point:
.PP
.EX
    cmd paste %{{
        load=$(cat ~/.local/share/lf/files)
        mode=$(echo "$load" | sed -n '1p')
        list=$(echo "$load" | sed '1d')
        if [ $mode = 'copy' ]; then
            cp -R $list .
        elif [ $mode = 'move' ]; then
            mv $list .
            rm ~/.local/share/lf/files
            lf -remote 'send clear'
        fi
    }}
.EE
.PP
Some useful things to be considered are to use the backup ('--backup') and/or preserve attributes ('-a') options with 'cp' and 'mv' commands if they support it (i.e. GNU implementation), change the command type to asynchronous, or use 'rsync' command with progress bar option for copying and feed the progress to the client periodically with remote 'echo' calls.
.PP
By default, lf does not assign 'delete' command to a key to protect new users. You can customize file deletion by defining a 'delete' command. You can also assign a key to this command if you like. An example command to move selected files to a trash folder and remove files completely after a prompt are provided in the example configuration file.
.SH SEARCHING FILES
There are two mechanisms implemented in lf to search a file in the current directory. Searching is the traditional method to move the selection to a file matching a given pattern. Finding is an alternative way to search for a pattern possibly using fewer keystrokes.
.PP
Searching mechanism is implemented with commands 'search' (default '/'), 'search-back' (default '?'), 'search-next' (default 'n'), and 'search-prev' (default 'N'). You can enable 'globsearch' option to match with a glob pattern. Globbing supports '*' to match any sequence, '?' to match any character, and '[...]' or '[^...] to match character sets or ranges. You can enable 'incsearch' option to jump to the current match at each keystroke while typing. In this mode, you can either use 'cmd-enter' to accept the search or use 'cmd-escape' to cancel the search. You can also map some other commands with 'cmap' to accept the search and execute the command immediately afterwards. For example, you can use the right arrow key to finish the search and open the selected file with the following mapping:
.PP
.EX
    cmap <right> :cmd-enter; open
.EE
.PP
Finding mechanism is implemented with commands 'find' (default 'f'), 'find-back' (default 'F'), 'find-next' (default ';'), 'find-prev' (default ','). You can disable 'anchorfind' option to match a pattern at an arbitrary position in the filename instead of the beginning. You can set the number of keys to match using 'findlen' option. If you set this value to zero, then the the keys are read until there is only a single match. Default values of these two options are set to jump to the first file with the given initial.
.PP
Some options effect both searching and finding. You can disable 'wrapscan' option to prevent searches to wrap around at the end of the file list. You can disable 'ignorecase' option to match cases in the pattern and the filename. This option is already automatically overridden if the pattern contains upper case characters. You can disable 'smartcase' option to disable this behavior. Two similar options 'ignoredia' and 'smartdia' are provided to control matching diacritics in latin letters.
.SH OPENING FILES
You can define a an 'open' command (default 'l' and '<right>') to configure file opening. This command is only called when the current file is not a directory, otherwise the directory is entered instead. You can define it just as you would define any other command:
.PP
.EX
    cmd open $vi $fx
.EE
.PP
It is possible to use different command types:
.PP
.EX
    cmd open &xdg-open $f
.EE
.PP
You may want to use either file extensions or mime types from 'file' command:
.PP
.EX
    cmd open ${{
        case $(file --mime-type -Lb $f) in
            text/*) vi $fx;;
            *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
        esac
    }}
.EE
.PP
You may want to use 'setsid' before your opener command to have persistent processes that continue to run after lf quits.
.PP
Regular shell commands (i.e. '$') drop to terminal which results in a flicker for commands that finishes immediately (e.g. 'xdg-open' in the above example). If you want to use asynchronous shell commands (i.e. '&') but also want to use the terminal when necessary (e.g. 'vi' in the above exxample), you can use a remote command:
.PP
.EX
    cmd open &{{
        case $(file --mime-type -Lb $f) in
            text/*) lf -remote "send $id \e$vi \e$fx";;
            *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
        esac
    }}
.EE
.PP
Note, asynchronous shell commands run in their own process group by default so they do not require the manual use of 'setsid'.
.PP
Following command is provided by default:
.PP
.EX
    cmd open &$OPENER $f
.EE
.PP
You may also use any other existing file openers as you like. Possible options are 'libfile-mimeinfo-perl' (executable name is 'mimeopen'), 'rifle' (ranger's default file opener), or 'mimeo' to name a few.
.SH PREVIEWING FILES
lf previews files on the preview pane by printing the file until the end or the preview pane is filled. This output can be enhanced by providing a custom preview script for filtering. This can be used to highlight source codes, list contents of archive files or view pdf or image files to name a few. For coloring lf recognizes ansi escape codes.
.PP
In order to use this feature you need to set the value of 'previewer' option to the path of an executable file. Five arguments are passed to the file, (1) current file name, (2) width, (3) height, (4) horizontal position, and (5) vertical position of preview pane respectively. Output of the execution is printed in the preview pane. You may also want to use the same script in your pager mapping as well:
.PP
.EX
    set previewer ~/.config/lf/pv.sh
    map i $~/.config/lf/pv.sh $f | less -R
.EE
.PP
For 'less' pager, you may instead utilize 'LESSOPEN' mechanism so that useful information about the file such as the full path of the file can still be displayed in the statusline below:
.PP
.EX
    set previewer ~/.config/lf/pv.sh
    map i $LESSOPEN='| ~/.config/lf/pv.sh %s' less -R $f
.EE
.PP
Since this script is called for each file selection change it needs to be as efficient as possible and this responsibility is left to the user. You may use file extensions to determine the type of file more efficiently compared to obtaining mime types from 'file' command. Extensions can then be used to match cleanly within a conditional:
.PP
.EX
    #!/bin/sh
.EE
.PP
.EX
    case "$1" in
        *.tar*) tar tf "$1";;
        *.zip) unzip -l "$1";;
        *.rar) unrar l "$1";;
        *.7z) 7z l "$1";;
        *.pdf) pdftotext "$1" -;;
        *) highlight -O ansi "$1";;
    esac
.EE
.PP
Another important consideration for efficiency is the use of programs with short startup times for preview. For this reason, 'highlight' is recommended over 'pygmentize' for syntax highlighting. Besides, it is also important that the application is processing the file on the fly rather than first reading it to the memory and then do the processing afterwards. This is especially relevant for big files. lf automatically closes the previewer script output pipe with a SIGPIPE when enough lines are read. When everything else fails, you can make use of the height argument to only feed the first portion of the file to a program for preview. Note that some programs may not respond well to SIGPIPE to exit with a non-zero return code and avoid caching. You may add a trailing '|| true' command to avoid such errors:
.PP
.EX
    highlight -O ansi "$1" || true
.EE
.PP
You may also use an existing preview filter as you like. Your system may already come with a preview filter named 'lesspipe'. These filters may have a mechanism to add user customizations as well. See the related documentations for more information.
.SH CHANGING DIRECTORY
lf changes the working directory of the process to the current directory so that shell commands always work in the displayed directory. After quitting, it returns to the original directory where it is first launched like all shell programs. If you want to stay in the current directory after quitting, you can use one of the example lfcd wrapper shell scripts provided in the repository at https://github.com/gokcehan/lf/tree/master/etc
.PP
There is a special command 'on-cd' that runs a shell command when it is defined and the directory is changed. You can define it just as you would define any other command:
.PP
.EX
    cmd on-cd &{{
        bash -c '
        # display git repository status in your prompt
        source /usr/share/git/completion/git-prompt.sh
        GIT_PS1_SHOWDIRTYSTATE=auto
        GIT_PS1_SHOWSTASHSTATE=auto
        GIT_PS1_SHOWUNTRACKEDFILES=auto
        GIT_PS1_SHOWUPSTREAM=auto
        git=$(__git_ps1 " (%s)")
        fmt="\e033[32;1m%u@%h\e033[0m:\e033[34;1m%d\e033[0m\e033[1m%f$git\e033[0m"
        lf -remote "send $id set promptfmt \e"$fmt\e""
        '
    }}
.EE
.PP
If you want to print escape sequences, you may redirect 'printf' output to '/dev/tty'. The following xterm specific escape sequence sets the terminal title to the working directory:
.PP
.EX
    cmd on-cd &{{
        printf "\e033]0; $PWD\e007" > /dev/tty
    }}
.EE
.PP
This command runs whenever you change directory but not on startup. You can add an extra call to make it run on startup as well:
.PP
.EX
    cmd on-cd &{{ ... }}
    on-cd
.EE
.PP
Note that all shell commands are possible but '%' and '&' are usually more appropriate as '$' and '!' causes flickers and pauses respectively.
.PP
There is also a 'pre-cd' command, that works like 'on-cd', but is run before the directory is actually changed.
.SH COLORS
lf tries to automatically adapt its colors to the environment. It starts with a default colorscheme and updates colors using values of existing environment variables possibly by overwriting its previous values. Colors are set in the following order:
.PP
.EX
 1. default
 2. LSCOLORS (Mac/BSD ls)
 3. LS_COLORS (GNU ls)
 4. LF_COLORS (lf specific)
 5. colors file (lf specific)
.EE
.PP
Please refer to the corresponding man pages for more information about 'LSCOLORS' and 'LS_COLORS'. 'LF_COLORS' is provided with the same syntax as 'LS_COLORS' in case you want to configure colors only for lf but not ls. This can be useful since there are some differences between ls and lf, though one should expect the same behavior for common cases. Colors file is provided for easier configuration without environment variables. This file should consist of whitespace separated pairs with '#' character to start comments until the end of line.
.PP
You can configure lf colors in two different ways. First, you can only configure 8 basic colors used by your terminal and lf should pick up those colors automatically. Depending on your terminal, you should be able to select your colors from a 24-bit palette. This is the recommended approach as colors used by other programs will also match each other.
.PP
Second, you can set the values of environment variables or colors file mentioned above for fine grained customization. Note that 'LS_COLORS/LF_COLORS' are more powerful than 'LSCOLORS' and they can be used even when GNU programs are not installed on the system. You can combine this second method with the first method for best results.
.PP
Lastly, you may also want to configure the colors of the prompt line to match the rest of the colors. Colors of the prompt line can be configured using the 'promptfmt' option which can include hardcoded colors as ansi escapes. See the default value of this option to have an idea about how to color this line.
.PP
It is worth noting that lf uses as many colors advertised by your terminal's entry in terminfo or infocmp databases on your system. If an entry is not present, it falls back to an internal database. If your terminal supports 24-bit colors but either does not have a database entry or does not advertise all capabilities, you can enable support by setting the '$COLORTERM' variable to 'truecolor' or ensuring '$TERM' is set to a value that ends with '-truecolor'.
.PP
Default lf colors are mostly taken from GNU dircolors defaults. These defaults use 8 basic colors and bold attribute. Default dircolors entries with background colors are simplified to avoid confusion with current file selection in lf. Similarly, there are only file type matchings and extension matchings are left out for simplicity. Default values are as follows given with their matching order in lf:
.PP
.EX
    ln  01;36
    or  31;01
    tw  01;34
    ow  01;34
    st  01;34
    di  01;34
    pi  33
    so  01;35
    bd  33;01
    cd  33;01
    su  01;32
    sg  01;32
    ex  01;32
    fi  00
.EE
.PP
Note that lf first tries matching file names and then falls back to file types. The full order of matchings from most specific to least are as follows:
.PP
.EX
 1. Full Path (e.g. '~/.config/lf/lfrc')
 2. Dir Name (e.g. '.git/') (only matches dirs with a trailing slash at the end)
 3. File Type (e.g. 'ln') (except 'fi')
 4. File Name (e.g. 'README*')
 5. File Name (e.g. '*README')
 6. Base Name (e.g. 'README.*')
 7. Extension (e.g. '*.txt')
 8. Default (i.e. 'fi')
.EE
.PP
For example, given a regular text file '/path/to/README.txt', the following entries are checked in the configuration and the first one to match is used:
.PP
.EX
 1. '/path/to/README.txt'
 2. (skipped since the file is not a directory)
 3. (skipped since the file is of type 'fi')
 4. 'README.txt*'
 5. '*README.txt'
 6. 'README.*'
 7. '*.txt'
 8. 'fi'
.EE
.PP
Given a regular directory '/path/to/example.d', the following entries are checked in the configuration and the first one to match is used:
.PP
.EX
 1. '/path/to/example.d'
 2. 'example.d/'
 3. 'di'
 4. 'example.d*'
 5. '*example.d'
 6. 'example.*'
 7. '*.d'
 8. 'fi'
.EE
.PP
Note that glob-like patterns do not actually perform glob matching due to performance reasons.
.PP
For example, you can set a variable as follows:
.PP
.EX
    export LF_COLORS="~/Documents=01;31:~/Downloads=01;31:~/.local/share=01;31:~/.config/lf/lfrc=31:.git/=01;32:.git*=32:*.gitignore=32:*Makefile=32:README.*=33:*.txt=34:*.md=34:ln=01;36:di=01;34:ex=01;32:"
.EE
.PP
Having all entries on a single line can make it hard to read. You may instead divide it to multiple lines in between double quotes by escaping newlines with backslashes as follows:
.PP
.EX
    export LF_COLORS="\e
    ~/Documents=01;31:\e
    ~/Downloads=01;31:\e
    ~/.local/share=01;31:\e
    ~/.config/lf/lfrc=31:\e
    .git/=01;32:\e
    .git*=32:\e
    *.gitignore=32:\e
    *Makefile=32:\e
    README.*=33:\e
    *.txt=34:\e
    *.md=34:\e
    ln=01;36:\e
    di=01;34:\e
    ex=01;32:\e
    "
.EE
.PP
Having such a long variable definition in a shell configuration file might be undesirable. You may instead use the colors file for configuration. A sample colors file can be found at https://github.com/gokcehan/lf/blob/master/etc/colors.example You may also see the wiki page for ansi escape codes https://en.wikipedia.org/wiki/ANSI_escape_code
.SH ICONS
Icons are configured using 'LF_ICONS' environment variable or an icons file. The variable uses the same syntax as 'LS_COLORS/LF_COLORS'. Instead of colors, you should put a single characters as values of entries. Icons file should consist of whitespace separated pairs with '#' character to start comments until the end of line. Do not forget to enable 'icons' option to see the icons. Default values are as follows given with their matching order in lf:
.PP
.EX
    ln  l
    or  l
    tw  t
    ow  d
    st  t
    di  d
    pi  p
    so  s
    bd  b
    cd  c
    su  u
    sg  g
    ex  x
    fi  -
.EE
.PP
A sample icons file can be found at https://github.com/gokcehan/lf/blob/master/etc/icons.example
